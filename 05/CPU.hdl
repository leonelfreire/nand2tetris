// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Decodes the instruction
	Mux16(
        // Type A
		a[0..2]=false,   // j3 j2 j1
		a[3..5]=false,   // d3 d2 d1
		a[6..7]=false,   // c6 c5
        a[8..9]=false,   // c4 c3
        a[10..11]=true,  // c2 c1
        a[12]=false,     // a
        a[13..15]=false, // ixx

        // Type C
        b[0..2]=instruction[0..2],     // j3 j2 j1
        b[3..5]=instruction[3..5],     // d3 d2 d1
        b[6..11]=instruction[6..11],   // c6 c5 c4 c3 c2 c1
        b[12]=instruction[12],         // a
        b[13..15]=instruction[13..15], // ixx

        // Type A or type C?
        sel=instruction[15],

        // Decodes
        out[0]=j3,
        out[1]=j2,
        out[2]=j1,
        out[3]=d3,
        out[3]=writeM,
        out[4]=d2,
        out[5]=d1,
        out[6]=c6,
        out[7]=c5,
        out[8]=c4,
        out[9]=c3,
        out[10]=c2,
        out[11]=c1,
        out[12]=a, // A or M?
        out[15]=i  // Instruction type
	);
    //////////////////////////////////////////////////

    // y = A or M?
    Mux16(a=Aout, b=inM, sel=a, out=y);
    //////////////////////////////////////////////////

    // Computes the input of A
    Mux16(a[0..14]=instruction[0..14], b=ALUout, sel=i, out=Ain);
    //////////////////////////////////////////////////

    // A should be loaded?
    Not(in=i, out=notI);
    Or(a=notI, b=d1, out=loadA);
    //////////////////////////////////////////////////

    // Computes the jump
    // j1 j2 j3 == 0 0 0? true -> no jump
    Or(a=j1, b=j2, out=jumpNo1);
    Or(a=jumpNo1, b=j3, out=jumpNo);

    // j1 j2 j3 == 1 1 1? true -> always jump
    And(a=j1, b=j2, out=jumpAlways1);
    And(a=jumpAlways1, b=j3, out=jumpAlways);

    // Computes ALUps (is positive?)
    Not(in=ALUng, out=ALUNotNg);
    Not(in=ALUzr, out=ALUNotZr);
    And(a=ALUNotNg, b=ALUNotZr, out=ALUps);

    // If the jump instruction contains one of this bits, jump
    And(a=j1, b=ALUng, out=jumpCond1);
    And(a=j2, b=ALUzr, out=jumpCond2);
    And(a=j3, b=ALUps, out=jumpCond3);
    Or(a=jumpCond1, b=jumpCond2, out=jumpCond4);
    Or(a=jumpCond4, b=jumpCond3, out=jumpCond);

    // Jump?
    Mux8Way16(
        a=false,
        b=false,
        c=false,
        d=false,
        e=false,
        f=true,
        g=true,
        h=true,
        sel[0]=jumpCond,
        sel[1]=jumpAlways,
        sel[2]=jumpNo,
        out[0]=jump
    );
    //////////////////////////////////////////////////

    // Main chips
	ARegister(in=Ain, load=loadA, out=Aout, out[0..14]=addressM);
	DRegister(in=ALUout, load=d2, out=Dout);
	PC(in=Aout, load=jump, inc=true, reset=reset, out[0..14]=pc);
    ALU(
		x=Dout,
		y=y,
		zx=c1,
		nx=c2,
		zy=c3,
		ny=c4,
		f=c5,
		no=c6,
		out=ALUout,
        out=outM,
		zr=ALUzr,
		ng=ALUng
	);
    //////////////////////////////////////////////////
}
